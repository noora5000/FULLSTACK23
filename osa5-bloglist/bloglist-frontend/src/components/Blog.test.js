import React from 'react'
import '@testing-library/jest-dom/extend-expect'
import { render, screen } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import Blog from './Blog'

describe('<Blog/>', () => {
  let container
  let div
  let user
  let mockHandler

  beforeEach(() => {
    // mock function generated by jest
    mockHandler = jest.fn()
    const mockUser = { username: 'testUsername', name: 'tester', id:'64a11fd1111fb11111eb1111' }

    const blog = {
      title: 'Component testing is done with react-testing-library',
      author: 'Test author',
      url: 'www.testi.com',
      likes: '0',
      user: {
        username: 'testRoot',
        name: 'testSuperUser',
        id: '64a91fd4919fb29478eb3ec2'
      }
    }

    container = render(
      <Blog
        blog={blog}
        handleLike={mockHandler}
        user={mockUser}
        handleDelete={mockHandler}
      />
    ).container

    div = container.querySelector('.blog')
    user = userEvent.setup()
  })
  test('renders content', async () => {

    // print the rendered content on screen: screen.debug()
    //
    // print part of the content (in this case the component that includes the text)
    // const element = screen.getByText('Component testing is done with react-testing-library')
    // screen.debug(element)

    expect(div).toHaveTextContent(
      'Component testing is done with react-testing-library'
    )
    expect(div).not.toHaveTextContent('www.testi.com')
    expect(div).not.toHaveTextContent('likes', { exact: false })
  })
  test('renders view-all content', async () => {
    // Starting a new session (userEvent-object's setup-method)
    const viewButton = screen.getByText('view')
    await user.click(viewButton)

    expect(div).toHaveTextContent('www.testi.com')
    expect(div).toHaveTextContent('likes', { exact: false })
    expect(div).toHaveTextContent('testSuperUser')
  })
  test('clicking like-button executes the function attached to it', async () => {
    const viewButton = screen.getByText('view')
    await user.click(viewButton)

    const likeButton = screen.getByText('like')
    await user.click(likeButton)
    await user.click(likeButton)
    expect(mockHandler.mock.calls).toHaveLength(2)
  })
})

// run the tests wit a command: CI=true npm test